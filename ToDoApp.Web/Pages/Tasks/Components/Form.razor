@using MediatR
@using ToDoApp.Application.Features.Categories.Domain
@using ToDoApp.Application.Features.Categories.Queries.GetAll
@using ToDoApp.Application.Features.Shared.Enums
@using ToDoApp.Application.Features.Tasks.Commands
@using ToDoApp.Application.Features.Tasks.Commands.Create
@using ToDoApp.Application.Features.Tasks.Commands.Edit
@using ToDoApp.Application.Features.Tasks.Commands.Shared
@using ToDoApp.Application.Features.Tasks.Domain
@using System.ComponentModel.DataAnnotations

<MudForm @ref="MudFormRef" Model="Task" @onsubmit="HandleValidSubmit">
    @if (Task.Exist)
    {
        <MudTextField @bind-Value="Task.Id"
                      Label="ID"
                      Variant="Variant.Outlined"
                      Class="d-none" />
    }

    <MudTextField @bind-Value="Task.Title"
                  For="@(() => Task.Title)"
                  Label="Title"
                  Variant="Variant.Outlined"
                  Required />

    <MudTextField @bind-Value="Task.Description"
                  For="@(() => Task.Description)"
                  Label="Description"
                  Lines="3"
                  Variant="Variant.Outlined" />

    <MudDatePicker Date="@Task.DueDate"
                   DateChanged="@(d => Task.DueDate = d)"
                   Label="Due Date"
                   Variant="Variant.Outlined"
                   DateFormat="MM/dd/yyyy"
                   MinDate="@DateTime.UtcNow.AddDays(-1)" />

    <MudSelect @bind-Value="Task.Priority"
               For="@(() => Task.Priority)"
               Label="Priority"
               Variant="Variant.Outlined">
        <MudSelectItem Value="@Priority.Low">Low</MudSelectItem>
        <MudSelectItem Value="@Priority.Medium">Medium</MudSelectItem>
        <MudSelectItem Value="@Priority.High">High</MudSelectItem>
    </MudSelect>

    <CategorySelector CategoryId="CategoryId" CategoryIdChanged="UpdateCategoryId" />

    <div class="d-flex flex-row-reverse gap-4 mt-4">
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   Disabled="@IsSubmitting"
                   ButtonType="ButtonType.Submit">
            @(IsSubmitting ? "Saving..." : "Save")
        </MudButton>
        <MudButton Variant="Variant.Text"
                   Color="Color.Error"
                   OnClick="OnCancel"
                   Disabled="@IsSubmitting">
            Cancel
        </MudButton>
    </div>
</MudForm>

@code {
    [Parameter] public TaskItem Task { get; set; } = null!;

    [Parameter] public EventCallback OnSubmit { get; set; }

    [Parameter] public EventCallback OnCancel { get; set; }

    [Parameter] public bool IsSubmitting { get; set; }

    [Parameter] public int? CategoryId { get; set; }

    [Parameter] public EventCallback<int?> CategoryIdChanged { get; set; }

    protected MudForm? MudFormRef { get; set; }

    private async Task UpdateCategoryId(int? newCategoryId)
    {
        if (CategoryId != newCategoryId)
        {
            CategoryId = newCategoryId;
            await CategoryIdChanged.InvokeAsync(newCategoryId);
        }
    }

    private async Task HandleValidSubmit()
    {
        if (MudFormRef?.IsValid == true)
        {
            await OnSubmit.InvokeAsync();
        }
    }
}